	{ Semantic Operations }
	oTempAllocate = 14;
	oTempFree = 15;
	oOperandPushMode = 16; { (16) }
	oOperandChooseMode = 17; { >>16 }
	oOperandPushVariable = 18;
	oOperandPushInteger = 19;
	oOperandPushChar = 20;
	oOperandPushBoolean = 21;
	oOperandPushJumpCondition = 22; { (15) }
	oOperandChooseJumpCondition = 23; { >>15 }
	oOperandPushStringDescriptor = 24;
	oOperandPushProcedure = 25;
	oOperandPushTrap = 26;
	oOperandPushCaseLow = 27;
	oOperandPushCaseHigh = 28;
	oOperandPushArrayLowerBound = 29;
	oOperandPushArrayUpperBound = 30;
	oOperandPushCopy = 31;
	oOperandPushTemp = 32;
	oOperandSetMode = 33; { (16) }
	oOperandSetLength = 34; { (13) }
	oOperandSetRegnum = 35; { (13) }
	oOperandChooseLength = 36; { >>13 }
	oOperandSetValue = 37; { (13) }
	oOperandChooseValue = 38; { >>13 }
	oOperandChooseManifestValue = 39; { >>13 }
	oOperandIsValueNegative = 40; { >>14 }
	oOperandEnterValueFromCaseTableAddress = 41;
	oOperandEnterValueFromCodeAddress = 42;
	oOperandEnterValueFromStringLength = 43;
	oOperandEnterValueFromDataAreaSize = 44;
	oOperandCompareLeftAndRight = 45; { >>14 }
	oOperandCompareRightAndDest = 46; { >>14 }
	oOperandIsJumpCondition = 47; { >>14 }
	oOperandComplementJumpCondition = 48;
	oOperandAddManifestValues = 49;
	oOperandSubtractManifestValues = 50;
	oOperandMultiplyManifestValues = 51;
	oOperandNegateManifestValue = 52;
	oOperandCompareManifestValues = 53; { >>14 }
	oOperandMergeShuntsWithAddress = 54;
	oOperandMergeShunts = 55;
	oOperandFoldManifestSubscript = 56;
	oOperandSwap = 57;
	oOperandSwapRightAndDest = 58;
	oOperandSwapLeftAndDest = 59;
	oOperandPop = 60;
	oFixPushAddress = 61;
	oFixPushLastAddress = 62;
	oFixSwapAddresses = 63;
	oFixAndFreeShuntList = 64;
	oFixAndFreeFalseBranches = 65;
	oFixForwardBranch = 66;
	oFixPopAddress = 67;
	oEmitProcLabel = 68; { (16) }
	oEmitNone = 69; { (17) }
	oEmitSingle = 70; { (17) }
	oEmitDouble = 71; { (17) }
	oEmitString = 72;
	oEmitStringLength = 73;
	oEmitConditionalForwardBranch = 74;
	oEmitUnconditionalForwardBranch = 75;
	oEmitConditionalBackwardBranch = 76;
	oEmitUnconditionalBackwardBranch = 77;
	oEmitSourceCoordinate = 78;
	oEmitMergeSourceCoordinate = 79;
	oEmitCaseMergeBranch = 80;
	oEmitCaseBranchTable = 81;
	oCasePush = 82;
	oCasePop = 83;
	oCaseEnterTCodeAddress = 84;
	oCaseEnterVariantAddress = 85;
	oCaseEnterMergeAddress = 86;
	oCaseEnterAbortAddress = 87;
	oArrayEnterLowerBound = 88;
	oArrayEnterUpperBound = 89;
	oOptionTestChecking = 90; { >>14 }

	{ Input Tokens }
	tMultiply = 0;
	firstInputToken = 0;
	tDivide = 1;
	tModulus = 2;
	tAdd = 3;
	tSubtract = 4;
	tEQ = 5;
	tNE = 6;
	tGT = 7;
	tGE = 8;
	tLT = 9;
	tLE = 10;
	tAnd = 11;
	tInfixAnd = 12;
	tOr = 13;
	tInfixOr = 14;
	tNegate = 15;
	tNot = 16;
	tChr = 17;
	tOrd = 18;
	tEoln = 19;
	tEOF = 20;
	tVarParm = 21;
	tFetchAddress = 22;
	tFetchInteger = 23;
	tFetchChar = 24;
	tFetchBoolean = 25;
	tAssignBegin = 26;
	tAssignAddress = 27;
	tAssignInteger = 28;
	tAssignChar = 29;
	tAssignBoolean = 30;
	tStoreParmAddress = 31;
	tStoreParmInteger = 32;
	tStoreParmChar = 33;
	tStoreParmBoolean = 34;
	tSubscriptBegin = 35;
	tSubscriptAddress = 36;
	tSubscriptInteger = 37;
	tSubscriptChar = 38;
	tSubscriptBoolean = 39;
	tArrayDescriptor = 40;
	tFileDescriptor = 41;
	tIfBegin = 42;
	tIfEnd = 43;
	tCaseBegin = 44;
	tWhileBegin = 45;
	tRepeatBegin = 46;
	tRepeatControl = 47;
	tCallBegin = 48;
	tParmEnd = 49;
	tProcedureEnd = 50;
	tWriteBegin = 51;
	tReadBegin = 52;
	tTrapBegin = 53;
	tWriteEnd = 54;
	tReadEnd = 55;
	tLiteralAddress = 56;
	firstCompoundToken = 56;
	tLiteralInteger = 57;
	tLiteralChar = 58;
	tLiteralBoolean = 59;
	tLiteralString = 60;
	tStringDescriptor = 61;
	tSkipString = 62;
	tIfThen = 63;
	tIfMerge = 64;
	tCaseSelect = 65;
	tCaseMerge = 66;
	tCaseEnd = 67;
	tWhileTest = 68;
	tWhileEnd = 69;
	tRepeatTest = 70;
	tSkipProc = 71;
	tCallEnd = 72;
	tLineNumber = 73;
	tTrap = 74;
	lastCompoundToken = 74;
	tEndOfFile = 75;
	lastInputToken = 75;

	{ Output Tokens }

	{ Input/Output Tokens }

	{ Error Codes }
	eDivisionByZero = 10;
	firstErrorCode = 10;
	lastSslErrorCode = 10;

	{ Type Values }
	{ Type 13 }
	minusOne = -1;
	zero = 0;
	null = 0;
	one = 1;
	two = 2;
	four = 4;
	eight = 8;
	twelve = 12;
	regAX = 1;
	regBX = 2;
	regCX = 3;
	regDX = 4;
	trHalt = 0;
	trReset = 1;
	trRewrite = 2;
	trRead = 3;
	trReadln = 4;
	trWrite = 5;
	trWriteln = 6;
	trWriteString = 7;
	trWriteInteger = 8;
	trWriteChar = 9;
	trReadInteger = 10;
	trReadChar = 11;
	trAssign = 12;
	trSubscriptAbort = 13;
	trCaseAbort = 14;
	trEoln = 15;
	trEof = 16;
	byte = 1;
	word = 2;
	{ Type 14 }
	no = 0;
	yes = 1;
	{ Type 15 }
	iJalways = -9;
	iJhi = -8;
	iJlos = -7;
	iJge = -6;
	iJlt = -5;
	iJle = -4;
	iJgt = -3;
	iJne = -2;
	iJeq = -1;
	iJnever = 0;
	{ Type 16 }
	mStatic = 1;
	mStaticManifest = 2;
	mTemp = 3;
	mTempIndirect = 4;
	mTempIndirectCaseOffset = 5;
	mStackReg = 6;
	mStack = 7;
	mBaseReg = 8;
	mArgument = 9;
	mManifest = 10;
	mResultReg = 11;
	mRemainderReg = 12;
	mScratchReg1 = 13;
	mScratchReg2 = 14;
	mGlobalBase = 15;
	mLineNum = 16;
	mMainProc = 17;
	mProc = 18;
	mTrap = 19;
	mString = 20;
	mWord = 21;
	{ Type 17 }
	iAdd = 1;
	iCmp = 2;
	iDec = 3;
	iDiv = 4;
	iInc = 5;
	iMul = 6;
	iShl = 7;
	iNeg = 8;
	iSub = 9;
	iMov = 10;
	iPush = 11;
	iPop = 12;
	iLoada = 13;
	iExtend = 14;
	iJmp = 15;
	iCall = 16;
	iReturn = 17;
	iEnter = 18;
	iLeave = 19;
	iGlobl = 20;
	iText = 21;
	iData = 22;
	iWord = 23;
	iSpace = 24;

	{ S/SL Rule Table Addresses } {
	Program = 0;
	EmitProgramPrologue = 7;
	Block = 65;
	EmitProgramEpilogue = 58;
	OperandPopAndFreeTemp = 3285;
	Routine = 160;
	Statements = 264;
	OperandNextParameter = 249;
	EmitMove = 3983;
	AssignStmt = 326;
	CallStmt = 334;
	IfStmt = 409;
	WhileStmt = 568;
	RepeatStmt = 625;
	CaseStmt = 657;
	WriteProc = 789;
	ReadProc = 873;
	TrapStmt = 964;
	OperandPushVariable = 1277;
	OperandPushExpressionAssignPopPop = 1831;
	OperandPushExpression = 1082;
	OperandConvertJumpConditionToData = 3310;
	OperandForceAddressIntoTemp = 3656;
	OperandForceToStack = 3812;
	OperandPushBooleanControlExpression = 462;
	FoldIfStmt = 503;
	OperandInfixOr = 3224;
	OperandForceToJumpCondition = 467;
	EmitTst = 4017;
	SkipToEndIf = 549;
	SkipToEndWhile = 606;
	OperandFreeTemp = 3298;
	CaseSelect = 685;
	CaseVariant = 688;
	CaseEnd = 696;
	EmitDefaultCaseAbort = 706;
	EmitCaseSubscriptJump = 730;
	OperandForceIntoTemp = 3594;
	OperandSubtractRightFromLeftPop = 2312;
	WriteParameter = 804;
	ReadParameter = 888;
	OperandAssignIntegerPopPop = 3247;
	EmitStringDescriptor = 1274;
	OperandNegate = 2137;
	OperandAddPop = 2215;
	OperandSubtractPop = 2334;
	OperandMultiplyPop = 2485;
	OperandDividePop = 2631;
	OperandModPop = 2757;
	OperandNot = 3220;
	OperandOrPop = 3241;
	OperandEqualPop = 3403;
	OperandGreaterPop = 3478;
	OperandLessPop = 3566;
	OperandChr = 2880;
	OperandOrd = 2917;
	OperandEolnFunction = 2941;
	OperandEofFunction = 3067;
	OperandSubscriptIntegerPop = 1344;
	OperandSubscriptCharPop = 1373;
	OperandSubscriptBooleanPop = 1405;
	OperandSubscriptNonManifestIntegerPop = 1408;
	OperandSubscriptNonManifestCharPop = 1663;
	OperandCheckedSubscriptNonManifestIntegerPop = 1421;
	OperandUncheckedSubscriptNonManifestIntegerPop = 1590;
	OperandPushArrayUpperBound = 1550;
	EmitCmp = 3927;
	OperandPushArrayLowerBound = 1536;
	EmitSubscriptAbort = 1569;
	OperandCheckedSubscriptNonManifestCharPop = 1676;
	OperandUncheckedSubscriptNonManifestCharPop = 1778;
	OperandAssignCharPopPop = 3270;
	OperandAssignBooleanPopPop = 3280;
	OperandNegateAssignPopPop = 2112;
	OperandAddAssignPopPopPop = 2152;
	OperandSubtractAssignPopPopPop = 2292;
	OperandMultiplyAssignPopPopPop = 2377;
	OperandDivideAssignPopPopPop = 2584;
	OperandNotAssignPopPop = 3129;
	OperandChrAssignPopPop = 2867;
	OperandOrdAssignPopPop = 2886;
	OperandAddRightToLeftPop = 2185;
	EmitAdd = 3897;
	OperandForceLeftIntoTemp = 3642;
	EmitSub = 3912;
	OperandMultiplyLeftByRightPop = 2410;
	OperandDivideLeftByRightPop = 2604;
	SaveTempRegsToStack = 3003;
	RestoreTempRegsFromStack = 3035;
	OperandPushFalseTemp = 3387;
	OperandPushTrueTemp = 3371;
	OperandPushTempByte = 3803;
	OperandFoldComparisonPopPop = 3570;
	OperandPushTempWord = 3794;
	OperandForceAddressIntoNewTemp = 3720;
	OperandAreLeftAndRightManifest = 3839; >>14
	OperandLeftOrRightIsTemp = 3868; >>14
	}

	{ S/SL Table Parameters }
	sslTblSize = 4052;
	minSslTableValue = -32767;
	maxSslTableValue = 32767;
